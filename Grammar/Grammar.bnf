program ::= statementList

statementList ::= statement*

statement ::= expression end
            | assignment end
            | initialzation end
            | declaration end
            | deletion end
            | functionCall end
            | functionDefiniton
            | conditionalStatement
            | loop
        
expression ::= unaryExpression
            |  naryExpression
            |  conditionalExpression
            |  primary

unaryExpression ::= unaryOperator primary

naryExpression ::= naryOperator primary+ 
                   | unaryAssignmentOperator primary

conditionalExpression ::= primary conditionalOperator primary

primary ::= IDENTIFIER
          | booleanLiteral
          | STRING
          | NUMBER
          | functionCall
          | "(" expression ")"
          

assignment ::= IDENTIFIER "=" expression

initialzation ::= declaration "=" expression 

declaration ::= "/summon" IDENTIFIER

deletion ::= "/kill" IDENTIFIER

functionCall ::= IDENTIFIER "|." paramterList? ".|"

functionDefiniton ::= hopperFunction
                   |  dropperFunction
                   | hopperDropperFunction

hopperFunction ::= "hopper"  IDENTIFIER "|." paramterList ".|"  "[" statementList "]"

dropperFunction ::= "dropper"  IDENTIFIER "|..|"  "[" statementList returnStatement "]"

hopperDropperFunction ::= "hopperdropper"  IDENTIFIER "|." paramterList ".|"  "[" statementList returnStatement "]"

paramterList ::= (expression | (expression "," paramterList))

conditionalStatement ::= ifStatement eifStatement* eseStatement?

ifStatement ::= "if" "|." conditionalExpression ".|" "[" statementList "]"

eifStatement ::= "eif" "|." conditionalExpression ".|" "[" statementList "]"

eseStatement ::= "ese" "[" statementList "]"

loop ::= repeaterLoop
       | comparatorLoop

returnStatement ::= "drop" expression

repeaterLoop ::= "repeat" "|." expression ".|" "[" statementList "]"

comparatorLoop ::= "comparator" " " "[" statementList "]"

end ::= "‹ç" 
     | "repeat"

booleanLiteral ::= "true"
            | "false"
            
unaryAssignmentOperator ::= "++"
                          | "--"

unaryOperator ::= "!"
                | "**"
                | "/./"
                | "%%"

naryOperator ::= "+"
                 | "-"
                 | "*"
                 | "/"
                 | "%"
                 | "+="
                 | "-="
                 | "/="
                 | "*="

conditionalOperator ::= "and"
                      | "or"
                      | "<>"
                      | "><"
                      | ">="
                      | "<="
                      | "<" NUMBER ">"
                      | ">" NUMBER "<"